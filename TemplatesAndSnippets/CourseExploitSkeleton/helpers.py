import logging
import random
import string
from pathlib import Path
import json

class OffsecLogger:
    def __init__(self, logfile: str = "exploit.log", debug: bool = False):
        self.logger = logging.getLogger("exploit")
        self.logger.setLevel(logging.DEBUG if debug else logging.INFO)
        fh = logging.FileHandler(logfile)
        ch = logging.StreamHandler()
        formatter = logging.Formatter("[%(levelname)s] %(message)s")
        fh.setFormatter(formatter)
        ch.setFormatter(formatter)
        self.logger.addHandler(fh)
        self.logger.addHandler(ch)

    def info(self, msg): self.logger.info(msg)
    def debug(self, msg): self.logger.debug(msg)
    def error(self, msg): self.logger.error(msg)
    def success(self, msg): self.logger.info(f"[+] {msg}")

class DataFaker:
    def __init__(self):
        self.last_identity = {}

    def generate_identity(self, domain="evil.io") -> dict:
        fn = random.choice(["Alice", "Bob", "Carol", "Dave"])
        ln = random.choice(["Smith", "Jones", "Brown", "Taylor"])
        username = f"{fn.lower()}_{ln.lower()}{random.randint(10,99)}"
        email = f"{fn.lower()}.{ln.lower()}{random.randint(10,99)}@{domain}"
        password = ''.join(random.choices(string.ascii_letters + string.digits, k=12))
        identity = {
            "first_name": fn, "last_name": ln, "username": username,
            "email": email, "password": password
        }
        self.last_identity = identity
        return identity

    def save_identity(self, path: str):
        with open(path, "w") as f:
            json.dump(self.last_identity, f, indent=2)

    def load_identity(self, path: str) -> dict:
        with open(path) as f:
            self.last_identity = json.load(f)
        return self.last_identity
