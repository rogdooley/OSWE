# common/exploit_skeleton.py
import json
from pathlib import Path
from dataclasses import dataclass, asdict, field
from typing import Optional


@dataclass
class ExploitContext:
    target_ip: str
    target_port: int
    attacker_ip: str
    attacker_port: int
    protocol: str = "http"
    token: Optional[str] = None
    session_cookie: Optional[str] = None
    vuln_name: Optional[str] = None
    poc_id: Optional[str] = None
    notes: str = ""
    output_path: Path = field(
        default_factory=lambda: Path("exploit_context.json"), repr=False
    )

    def target_url(self) -> str:
        return f"{self.protocol}://{self.target_ip}:{self.target_port}"

    def attacker_url(self) -> str:
        return f"{self.protocol}://{self.attacker_ip}:{self.attacker_port}"

    def save(self) -> None:
        data = {
            k: str(v) if isinstance(v, Path) else v
            for k, v in asdict(self).items()
            if k != "output_path"
        }
        with self.output_path.open("w") as f:
            json.dump(data, f, indent=2)

    def load(self) -> None:
        if self.output_path.exists():
            with self.output_path.open() as f:
                data = json.load(f)
            for k, v in data.items():
                setattr(self, k, Path(v) if k == "output_path" else v)


class ExploitSkeleton:
    def __init__(self, ctx: ExploitContext, proxies: Optional[dict] = None):
        self.ctx = ctx
        self.proxies = proxies or {}
        self.session = None

    def setup(self):
        raise NotImplementedError("You must implement the setup method")

    def exploit(self):
        raise NotImplementedError("You must implement the exploit method")

    def run(self):
        self.setup()
        self.exploit()
        self.ctx.save()
