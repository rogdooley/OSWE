import json
from pathlib import Path
from dataclasses import dataclass, field, asdict
from typing import Optional

@dataclass
class ExploitContext:
    target_ip: str
    target_port: str
    attacker_ip: str
    attacker_port: str
    protocol: str = "http"
    token: Optional[str] = None
    session_cookie: Optional[str] = None
    output_path: Path = field(default_factory=lambda: Path("exploit_context.json"))

    def __post_init__(self):
        if isinstance(self.output_path, str):
            self.output_path = Path(self.output_path)

    def save(self):
        data = {k: str(v) if isinstance(v, Path) else v for k, v in asdict(self).items()}
        with self.output_path.open("w") as f:
            json.dump(data, f, indent=2)

    def load(self):
        if self.output_path.exists():
            with self.output_path.open() as f:
                data = json.load(f)
            for k, v in data.items():
                setattr(self, k, v)
