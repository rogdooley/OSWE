python:
  extensions: [".py"]
  rules:
    - pattern: 'eval\\('
      description: 'Arbitrary code execution (eval)'
    - pattern: 'exec\\('
      description: 'Arbitrary code execution (exec)'
    - pattern: 'pickle\\.load'
      description: 'Unsafe deserialization with pickle'
    - pattern: 'marshal\\.loads'
      description: 'Unsafe deserialization with marshal'
    - pattern: 'subprocess\\.(Popen|call|run|check_output)'
      description: 'Command execution via subprocess'
    - pattern: 'input\\('
      description: 'User input without sanitization'
    - pattern: 'sqlite3\\.connect\\(.*\\)'
      description: 'Database connection (check for string concatenation)'
    - pattern: 'cursor\\.execute\\(.*\\+.*\\)'
      description: 'Potential SQL injection (dynamic query)'
    - pattern: 'password\\s*=\\s*["\'].*["\']'
      description: 'Hardcoded password'
    - pattern: 'hashlib\\.md5'
      description: 'Weak hash function (MD5)'
    - pattern: 'hashlib\\.sha1'
      description: 'Weak hash function (SHA1)'
    - pattern: 'render\\(.+request\\.GET\\[.+\\]'
      description: 'Potential XSS from unsanitized input in render'

csharp:
  extensions: [".cs"]
  rules:
    - pattern: 'BinaryFormatter\\.Deserialize'
      description: 'Unsafe deserialization with BinaryFormatter'
    - pattern: 'DataContractSerializer'
      description: 'Potentially dangerous serialization (type confusion)'
    - pattern: 'JavaScriptSerializer\\.Deserialize'
      description: 'Unvalidated input deserialization'
    - pattern: 'new\\s+SqlCommand\\(.*\\+.*\\)'
      description: 'SQL injection via concatenated SQL string'
    - pattern: 'SqlCommand\\.CommandText\\s*=\\s*.*\\+.*'
      description: 'Dynamic SQL query - SQL injection risk'
    - pattern: 'Process\\.Start'
      description: 'Command execution'
    - pattern: 'HttpUtility\\.HtmlEncode\\s*\\(.*Request\\..*\\)'
      description: 'Potential XSS from improperly encoded user input'
    - pattern: 'Request\\.QueryString\\[.*\\]'
      description: 'Unvalidated input from query string'
    - pattern: 'ViewData\\[".*"\\]\\s*=\\s*Request\\..*'
      description: 'Possible reflection/XSS from unsanitized input'
    - pattern: 'new\\s+PasswordDeriveBytes'
      description: 'Weak password derivation'
    - pattern: 'MD5CryptoServiceProvider'
      description: 'Weak hash function (MD5)'


javascript:
  extensions: [".js"]
  rules:
    - pattern: 'eval\\('
      description: 'Arbitrary code execution (eval)'
    - pattern: 'new\\s+Function\\('
      description: 'Dynamic function execution'
    - pattern: 'innerHTML\\s*=\\s*'
      description: 'Potential DOM-based XSS (innerHTML assignment)'
    - pattern: 'document\\.write\\('
      description: 'Potential DOM-based XSS (document.write)'
    - pattern: 'localStorage\\.setItem\\('
      description: 'Storing sensitive data in localStorage'
    - pattern: 'XMLHttpRequest\\('
      description: 'Direct client-side communication (check origin)'
    - pattern: 'fetch\\(.*\\)'
      description: 'Check for untrusted URL or missing CSP'
    - pattern: 'setTimeout\\((\"|\').*\\1,?\\s*\\d*\\)'
      description: 'Dynamic execution in setTimeout'

php:
  extensions: [".php"]
  rules:
    - pattern: 'eval\\('
      description: 'Arbitrary code execution via eval'
    - pattern: 'assert\\('
      description: 'Remote code execution via assert'
    - pattern: 'create_function\\('
      description: 'Dynamic function definition (RCE)'
    - pattern: 'include\\s*\\(.*\\$_(GET|POST|REQUEST)'
      description: 'File inclusion vulnerability'
    - pattern: 'require\\s*\\(.*\\$_(GET|POST|REQUEST)'
      description: 'File inclusion vulnerability'
    - pattern: 'include_once\\s*\\(.*\\$_(GET|POST|REQUEST)'
      description: 'File inclusion vulnerability'
    - pattern: 'require_once\\s*\\(.*\\$_(GET|POST|REQUEST)'
      description: 'File inclusion vulnerability'
    - pattern: 'preg_replace\\s*\\(.*?/e.*?/'
      description: 'Code execution via preg_replace /e modifier'
    - pattern: 'system\\('
      description: 'Command execution via system()'
    - pattern: 'exec\\('
      description: 'Command execution via exec()'
    - pattern: 'passthru\\('
      description: 'Command execution via passthru()'
    - pattern: 'shell_exec\\('
      description: 'Command execution via shell_exec()'
    - pattern: 'unserialize\\('
      description: 'Unsafe deserialization'
    - pattern: 'mysqli_query\\(.*\\$_(GET|POST|REQUEST)'
      description: 'Potential SQL injection'
    - pattern: 'pdo->query\\(.*\\$_(GET|POST|REQUEST)'
      description: 'Potential SQL injection'
    - pattern: 'password\\s*=\\s*[\"\'].*[\"\']'
      description: 'Hardcoded password'
    - pattern: 'md5\\('
      description: 'Weak hashing algorithm (MD5)'
    - pattern: 'sha1\\('
      description: 'Weak hashing algorithm (SHA1)'


java:
  extensions: [".java"]
  rules:
    - pattern: 'Runtime\\.getRuntime\\(\\)\\.exec'
      description: 'Command execution via Runtime.exec'
    - pattern: 'ProcessBuilder'
      description: 'Command execution via ProcessBuilder'
    - pattern: 'ObjectInputStream'
      description: 'Unsafe deserialization with ObjectInputStream'
    - pattern: 'XMLDecoder'
      description: 'Insecure XML deserialization with XMLDecoder'
    - pattern: 'XStream\\.fromXML'
      description: 'Insecure XML deserialization with XStream'
    - pattern: 'ScriptEngine\\.eval'
      description: 'Code execution via ScriptEngine.eval'
    - pattern: 'Statement\\.execute(Query|Update)'
      description: 'SQL injection via Statement execution'
    - pattern: 'PreparedStatement.*\\.set.*\\(.*\\+'
      description: 'SQL injection via parameter concatenation'
    - pattern: 'Class\\.forName\\('
      description: 'Dynamic class loading (may be dangerous)'
    - pattern: 'Cipher\\.getInstance\\(\".*ECB.*\"'
      description: 'Insecure cipher mode (ECB)'
    - pattern: 'MessageDigest\\.getInstance\\(\"MD5\"'
      description: 'Weak hash function (MD5)'
    - pattern: 'MessageDigest\\.getInstance\\(\"SHA1\"'
      description: 'Weak hash function (SHA1)'
    - pattern: 'new\\s+FileInputStream\\('
      description: 'File read access (check for tainted input)'
    - pattern: 'new\\s+FileOutputStream\\('
      description: 'File write access (check for tainted input)'
    - pattern: 'password\\s*=\\s*\".*\"'
      description: 'Hardcoded password'
    - pattern: 'request\\.getParameter\\('
      description: 'Unvalidated user input (check usage context)'
    - pattern: 'response\\.getWriter\\(\\)\\.write\\(.*request\\.getParameter\\('
      description: 'Possible XSS via direct output'

